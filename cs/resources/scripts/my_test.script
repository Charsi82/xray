local function print(txt) 
	if db.actor then news_manager.send_tip(db.actor, "dbg:"..tostring(txt)) end
end
local function Msg(fmt, ...)
	log(fmt:format(...))
end
local callbacks ={
"use_object",
-- "on_key_press",
-- "on_key_release", 
--"on_mouse_wheel", 
--"switch_torch", 
-- "on_key_hold", 
-- "on_mouse_move",
--"on_actor_weapon_zoom_in",
--"on_actor_weapon_zoom_out",
"on_change_slot",
"on_attach_vehicle",
"on_detach_vehicle",
"on_actor_menu_open"
}

function get_prj()
	for i=1,65000 do
	local obj = level.object_by_id(i)
	if obj and get_clsid(obj) == clsid.car_s then
		log("find car:"..obj:name())
		return obj
	end
	end
	-- return level_object_by_sid(300)
end

function main()
--[[	for k, v in pairs(callbacks) do
		event(v):register(function(e)
			local s = "event["..e.name.."]:"
			for k,v in ipairs(e) do
				if type(v) =='userdata' then
					if v.name and type(v.name)=='function' then
						s = s .." "..v:name() -- object
					elseif v.WindowName and type(v.WindowName)=='function' then
						s = s .." "..(v:WindowName() or "") --wnd
					else
						s = s .."noname_userdata"
					end
				else
					s = s .." ".. tostring(v)
				end
			end
			print(s)
		end)
	end]]
	event("on_key_press"):register(function(e)
		-- print ("on_key_press:"..tostring(e[1]))
		--71 72 73
		--75 76 77
		--79 80 81
		--82
--[[		if e[1]==82 then
			local prj = get_prj()
			if prj then print("projector_is_on = "..tostring(prj:projector_is_on()))
			else print("no prj")
			end
		end
		if e[1]==71 then
			local prj = get_prj()
			if prj then print("projector_is_on = "..tostring(prj:switch_projector(false)))
			else print("no prj")
			end
		end
		
		if e[1]==73 then
			local prj = get_prj()
			if prj then print("projector_is_on = "..tostring(prj:switch_projector(true)))
			else print("no prj")
			end
		end]]
		if e[1]==82 then -- num0
			local sobj = alife():object("mar_smart_terrain_5_12_box")
			if sobj then
				local obj = level.object_by_id(sobj.id)
				if obj then
					local pos = obj:position()
					
					local pt  = profile_timer()
					pt:start()
					local sp = level_point_projection(pos)
					pt:stop()
					Msg("ssp: %d / %d", sp.x, sp.y)
					Msg("time_s: %.2f", pt:time())
					
					local pt  = profile_timer()
					pt:start()
					local esp = level.point_projection(pos)
					pt:stop()
					Msg("esp: %d / %d", esp.x, esp.y)
					Msg("time_e: %.2f", pt:time())
					
				end
			end
		end
	end
	)
end

local st = CUIStatic()
st:Init(212,10,50,50)
event("actor_net_spawn"):register(
function()
	get_hud():AddDialogToRender(st)
end)
event("actor_net_destroy"):register(
function()
	get_hud():RemoveDialogToRender(st)
end)
event("actor_update"):register(
function()
	-- local s = "tg="..time_global() .." ".. tostring(db.actor.satiety) .. " "..tostring(db.actor.alcohol)
	local s = string.format("tg = %d outdoor = %s ",time_global(), (db.actor:is_actor_outdoors() and "true" or "false"))
	
	--local ht = level.hud_target()
	--if ht and ht.range then s = s .. string.format("dist = %.2f ", ht.range ) end
	--if ht and ht.element then s = s .. string.format("e = %d ", ht.element ) end
	local cd=device().cam_dir
	local ad = db.actor:direction()
	--s=s..string.format("[%.1f][%.1f][%.1f] - [%.1f][%.1f][%.1f] ",cd.x,cd.y,cd.z,ad.x,ad.y,ad.z )
	local sobj = alife():object("mar_smart_terrain_5_12_box")
	if sobj then
		local obj = level.object_by_id(sobj.id)
		if obj then
			-- local s = "_"
			-- local scr_pos = level.point_projection(obj:position())
			--local scr_pos = level_point_projection(obj:position())
			--s = string.format("x= %f , y = %f",scr_pos.x ,scr_pos.y )
			
--[[			local ht = level.hud_target()
			-- if ht and ht.range then s = s .. string.format("dist = %f ", ht.range ) end
			
			if ht then 
				local ht_obj = ht.object
				if ht_obj then
					s = s..string.format("o_name = %s ", ht_obj:name() )
					
					local cd = device().cam_dir
					local dir = db.actor:position():sub(ht_obj:position())
					s = s.. (cd:dotproduct(dir)>0 and"+" or "-")
				end
			end]]
--[[			if db.actor.satiety then
			s = s .." ".. tostring(db.actor.satiety)
			end]]
--[[			if db.actor.alcohol then
			s = s .. " "..tostring(db.actor.alcohol)
			end]]
--[[			if db.actor.is_zoom_aiming_mode then
				local state = db.actor:is_zoom_aiming_mode()
				s = string.format("aim = %s", state and "true" or "false" )
			end]]
--[[			if level.is_crosshair_shown then
				s = s..tostring(level.is_crosshair_shown())
			end]]

		end
	end
	st:SetText(s)
	-- level.projection_point(pos)
end)

function level_point_projection(point)
--[[
взято с амк-форума
]]
local dev = device()
local scr_w = dev.width
local scr_h = dev.height

local fov2 = (dev.fov/2) * (math.pi/180)
local scr_dist = 0.5 * scr_h / math.tan(fov2)
-- Msg("s:fov2 = %.4f, scr_dist = %.4f", fov2, scr_dist);

local ppp = vector():sub(point, dev.cam_pos)
local dp = dev.cam_dir:dotproduct(ppp)
-- Msg("s:ppp=(%.4f, %.4f, %.4f) dp=%.4f", ppp.x, ppp.y, ppp.z, dp);

local x = 512 + dev.cam_right:dotproduct(ppp) * scr_dist / dp * (1024/scr_w)
local y = 384 - dev.cam_top:dotproduct(ppp) * scr_dist / dp * (768/scr_h)

return {x = x, y = y}
end