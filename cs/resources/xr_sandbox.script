--[[---------------------------------------------------------------------
—истема, позвол€юща€ организовывать event-driven модель с
делегированием событий
–еализаци€ на метатаблицах 22/01/2015
--]]---------------------------------------------------------------------
-- event callbacks can trigger another events but they must have different type

local events = {}
local events_in_process = {}
local base_event = {
register = function(self,func) table.insert(self.callbacks, func) end,
unregister = function(self,func)
	for _,cb in ipairs(self.callbacks) do
		if cb == func then
			table.remove(self.callbacks, _)
			return
		end
	end
end,
trigger = function(my_self,self)
	self = not self and my_self or setmetatable(self, { __index = my_self})
	if next(self.callbacks) then
		-- hang debug
		events_in_process[#events_in_process+1] = self
		
		local callbacks_to_remove = {}
		for _,funct in ipairs(self.callbacks) do
			if self.__break==true then break end
			funct(self)
			-- remove callback from stack
			if self.__removeThisCallback then
				callbacks_to_remove[#callbacks_to_remove+1] = _
				self.__removeThisCallback = nil
			end
		end
		
		-- hang debug
		events_in_process[#events_in_process] = nil

		-- remove collected callbacks from stack
		for id = #callbacks_to_remove,1,-1 do
			table.remove(self.callbacks, callbacks_to_remove[id])
		end
		if self.__dbg_fingerprint then self.__dbg_fingerprint = nil end
	end
	return self
end,
stop = function(self) self.__break = true return self end,
print = function(self) for k,v in pairs(self) do print(k, v) end end,
removeThisCallback = function(self) self.__removeThisCallback = true return self end,
setFingerprint = function(self, val) self.__dbg_fingerprint = val return self end,
clear = function(self) self.callbacks = {} return self end
}

function event(name,data)
	if not events[name] then
		events[name] = setmetatable({name = name, callbacks = {}} , {__index = base_event})
	end
	if data then --trigger
		return setmetatable(data,{ __index = events[name]}):trigger()
	end
	return setmetatable({},{ __index = events[name]}) -- reg/unreg/etc
end

function init()
_G.event = event
end
